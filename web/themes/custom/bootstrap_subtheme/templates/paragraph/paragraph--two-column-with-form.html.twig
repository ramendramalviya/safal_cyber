{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set bg_color = content.field_two_column_with_form_bg.0|render|striptags|trim|clean_class %}
{% set layout = content.field_two_column_with_form_lay.0|render|striptags %}
{% set container_width = content.field_two_column_with_form_conta.0|render|striptags|trim|clean_class %}


{% if layout == '6_6_layout' %}
  {% set col_layout_6 = 'col-sm-12 col-md-6 col-lg-6' %}
{% elseif layout == '7_5_layout' %}
  {% set col_layout_7 = 'col-sm-12 col-md-8 col-lg-8' %}
  {% set col_layout_5 = 'col-sm-12 col-md-4 col-lg-4' %}
{% endif %}


{% block paragraph %}
  <div class="two-column-form-wrap container-fluid bg-{{ bg_color }}">
   <div class="container">
    <div class="row gx-5 row-gap-3">
      <div class="{{ col_layout_7 }} {{ col_layout_6 }}" >
        <div class="column-wrap">
          {% if content.field_two_col_with_form_title|render is not empty %}
            <div class="title-wrap">
              <h2>{{ content.field_two_col_with_form_title }}</h2>
            </div>
          {% endif %}
          {% if content.field_two_col_with_form_desc|render is not empty %}
            <div class="text-wrap">
              {{ content.field_two_col_with_form_desc }}
            </div>  
          {% endif %}
          {% if content.field_two_col_with_form_button|render is not empty %}
            <div class="link-wrap link-hover-effect">
              {{ content.field_two_col_with_form_button }}
            </div>  
          {% endif %}
      </div>  
      </div>      
      <div class="{{ col_layout_5 }} {{ col_layout_6 }}">
      <div class="column-wrap">
              {% if content.field_two_col_with_form_form|render is not empty %}
                <div class="img-wrap">{{ content.field_two_col_with_form_form }}
                </div>
              {% endif %}
            </div> 
    </div>
    </div> 
     </div> 
  </div>  
{% endblock paragraph %}
